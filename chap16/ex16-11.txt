data Expr = Val Int | Add Expr Expr

type Stack = [Int]
type Code = [Op]
data Op = PUSH Int | ADD deriving Show

comp :: Expr -> Code
comp (Val n) = [PUSH n]
comp (Add x y) = comp x ++ comp y ++ [ADD]

comp' e c = comp e ++ c

comp' (Val n) c
comp (Val n) ++ c
[PUSH n] ++ c
PUSH n : c

comp' (Add x y) c
comp (Add x y) ++ c
comp x ++ comp y ++ [ADD] ++ c
comp x ++ comp y ++ (ADD : c)
comp x ++ (comp' y (ADD : c))
comp' x (comp' y (ADD : c)) 


